#define NUM_LOOPS 10000000
	for (int i=0; i < NUM_LOOPS; i++) {
		text[1]++;
		aes_encrypt(plaintext_ptr, ciphertext, expanded_key);
//		print_hex(ciphertext, 16);
	}

gcc -m64 -std=gnu99 -o bin/bench keyschedule.c aes.c bench.c debug.c -O3 -Wall -Werror

2011-08-15 12:26, git commit 2e47a10422985674f0621a39b6db082c66f3153b
	10M loops @ 7.08 seconds
	10M/7.08 loops/sec
	(10M/7.08 * 16)/2^20 = 21.55 MiB/s 

From 2011-08-15 14:00 and onward, the following is used:
gcc -m64 -std=gnu99 -o bin/bench keyschedule.c aes.c bench.c debug.c -O3 -Wall -Werror -msse -msse2 -msse3 -mfpmath=sse -march=nocona

2011-08-15 14:00, git commit c41f6d88c7f942e19c1a96d26572569fbde9060b
	Added SSE intrinsics in AddRoundKey (now a single SSE2 PXOR instead of 16 regular byte-sized XORs) (saved 0.3 seconds in 10M loops)
	Changed optimization flags to use SSE (saved the rest)

	10M loops @ 6.5 seconds = 23.47 MiB/s


2011-08-15 20:15, to-be-commited AES-NI code

	10M loops in 0.322 seconds = 474 MiB/s !!! Single-threaded!


--------------
CTR
-------------

2011-08-17 14:00:

(Reads 16 bytes at a time)
Crimson II.m4a (340051433 bytes)
$ time bin/ctr -e /Volumes/ramdisk/crimson_plain -o /dev/null
real	0m1.278s
Decrypts at the same speed
= 253.75 MiB/s

2011-08-18 10:45:

$ time bin/ctr -e /Volumes/ramdisk/crimson_plain -o /dev/null
real	0m0.762s
= 425.59 MiB/s - still single-threaded!
(22.4 MiB/second without AES-NI support...)
